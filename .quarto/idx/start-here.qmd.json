{"title":"The quickest route to acquiring knowledge is through practice.","markdown":{"yaml":{"title":"The quickest route to acquiring knowledge is through practice.","jupyter":"python3","layout-ncol":4},"headingText":"Start with Python, becuase it is a versatile programming language that has a wide range of applications and is used in many different fields.","containsRefs":false,"markdown":"\nWe strongly believe that the best way to acquire knowledge is through practical experience. That's why we prioritize experiential learning and recognize the importance of diverse perspectives and identities in education. Our approach to learning is collaborative, interactive, and rooted in shared cultural practices. We value personal autonomy, creativity, and self-fulfillment. It's worth noting that we do not use rewards or punishments to influence learning.\n\nLearning data science is a continuous journey, and embracing the learning process is essential. Feel free to experiment, make mistakes, and ask questions. With time and practice, youâ€™ll become more comfortable with Data Science and be able to tackle increasingly complex tasks. We suggest using Python for web development, applications, or data science; however, it is not the only option in the market. \n\n```{mermaid}\nflowchart TD\n    A[Data Science] --> B{Tool}\n    B -->|Model| C[Result]\n    C --> D[Conclusion]\n    D --> B\n    B ---->|No| E[End]\n```\n\\\n**Here are some steps you can take to learn data science:**\n\n* Learn the fundamentals of computer science, including data structures, algorithms, and programming languages. Python is a popular language for data science, but other languages like R and Julia are also used.\n\n* Learn the basics of statistics and probability theory, which are essential for understanding data analysis and machine learning.\n\n* Learn how to work with data using tools like SQL, Excel, and data visualization libraries like Matplotlib and Seaborn.\n\n* Learn machine learning algorithms and techniques, including supervised and unsupervised learning, regression, classification, and clustering.\n\n* Practice your skills by working on real-world projects and participating in online communities like Kaggle and GitHub.\n\n* Keep up with the latest developments in the field by reading blogs, attending conferences, and following experts on social media.\n\n\n<mark>Notes:</mark> If you have programming experience, it would be beneficial to begin learning basic statistics as a beginner.\n\n:::{.empty-half-space}\n:::\n\nPython has a vast ecosystem of libraries that provide a wide range of functionality for various tasks. These libraries can be installed using package managers like [pip](https://packaging.python.org/en/latest/tutorials/installing-packages/) and [conda](https://docs.conda.io/projects/conda/en/latest/user-guide/install/macos.html). Some of the most popular libraries include \n\n* NumPy,\n* Pandas, \n* Matplotlib, \n* Scikit-learn,\n* TensorFlow, \nand PyTorch.\n\n**NumPy** is a library for numerical computing that provides support for arrays and matrices. Pandas is a library for data manipulation and analysis that provides support for data frames and series. Matplotlib is a library for data visualization that provides support for creating charts and graphs. Scikit-learn is a library for machine learning that provides support for various algorithms and models. TensorFlow and PyTorch are libraries for deep learning that provide support for building and training neural networks.\n\nThere are also libraries for web development, such as [Flask](https://flask.palletsprojects.com/) and [Django](https://www.djangoproject.com), and libraries for scientific computing, such as [SciPy](https://scipy.org) and [SymPy](https://www.sympy.org). Python also has libraries for working with databases, such as SQLAlchemy and Psycopg2, and libraries for working with APIs, such as Requests and PyGithub.\n\nOverall, the Python ecosystem of libraries is vast and diverse, providing support for a wide range of tasks and applications.\n\n## [NumPy](https://numpy.org)\nNumPy is a powerful Python library for numerical computing. It provides support for large, multi-dimensional arrays and matrices, along with a collection of mathematical functions to operate on these arrays efficiently. NumPy is widely used in scientific computing, data analysis, and machine learning.\n\n```{python}\n'''\nIn this code snippet, we are importing the NumPy library and giving it an alias np. NumPy is a library for numerical computing in Python that provides support for arrays and matrices.\n\nNext, we are creating a NumPy array a using the arange() function, which creates an array of integers from 0 to 14. We then use the reshape() function to reshape the array into a 3x5 matrix.\n'''\nimport numpy as np\na = np.arange(15).reshape(3, 5)\na\n```\n\n## [Matplotlib](https://matplotlib.org)\nMatplotlib is a popular Python library used for creating visualizations and plots. It provides a wide range of functionality for generating various types of charts, graphs, and plots. Here's a brief introduction to get you started with Matplotlib.\n\n```{python}\n'''\nIn this code snippet, we are importing the pyplot module from the matplotlib library and giving it an alias plt. matplotlib is a plotting library for Python that provides a wide range of tools for creating visualizations.\n\nNext, we are creating a new figure using the figure() function from pyplot. We then create three NumPy arrays x, y, and yerr using the arange() and linspace() functions. These arrays are used to generate a sine wave with some error bars.\n\nWe then set the face color of the figure to #c9c9c9 using the figure() function from pyplot.\n\nNext, we use the errorbar() function from pyplot to plot the sine wave with error bars. We create four different plots with different combinations of upper and lower limits on the error bars. We also add labels to each plot using the label parameter.\n\nFinally, we use the legend() function from pyplot to add a legend to the plot and the show() function to display the plot.\n\nThis code demonstrates how to use matplotlib to create a plot with error bars and a legend. matplotlib provides a wide range of tools for creating visualizations, making it a popular choice for data analysis and scientific computing.\n'''\nimport matplotlib.pyplot as plt\n\nfig = plt.figure()\nx = np.arange(10)\ny = 2.5 * np.sin(x / 20 * np.pi)\nyerr = np.linspace(0.05, 0.2, 10)\nplt.figure(facecolor='#c9c9c9')\n\nplt.errorbar(x, y + 3, yerr=yerr, label='both limits (default)')\nplt.errorbar(x, y + 2, yerr=yerr, uplims=True, label='uplims=True')\nplt.errorbar(x, y + 1, yerr=yerr, uplims=True, lolims=True,\n             label='uplims=True, lolims=True')\n\nupperlimits = [True, False] * 5\nlowerlimits = [False, True] * 5\nplt.errorbar(x, y, yerr=yerr, uplims=upperlimits, lolims=lowerlimits,\n             label='subsets of uplims and lolims')\n\nplt.legend(loc='lower right')\nplt.show(fig)\n```\n\n## [Plotly](https://plotly.com)\nPlotly is a powerful data visualization library that allows you to create interactive and dynamic visualizations in Python. It supports a wide range of chart types, including line plots, scatter plots, bar charts, histograms, and more. In addition to Python, Plotly also has APIs for R, MATLAB, JavaScript, and other programming languages.\n\n```{python}\n'''\nIn this code snippet, we are importing the plotly.express module and giving it an alias px. plotly is a Python library for creating interactive visualizations, and plotly.express is a high-level interface for creating many types of plots.\n\nNext, we are importing the plotly.io module and giving it an alias pio. This module provides tools for exporting plots to various file formats.\n\nWe then load the gapminder dataset from plotly.express using the data() function and store it in a variable gapminder. This dataset contains information about life expectancy, GDP per capita, and population for various countries over time.\n\nWe then filter the dataset to only include data from the year 2007 using the query() function and store the result in a variable gapminder2007.\n\nNext, we use the scatter() function from plotly.express to create a scatter plot of GDP per capita vs. life expectancy, with markers colored by continent and sized by population. We also set the maximum marker size to 60 and specify the country name as the hover text.\n\nFinally, we use the update_layout() function to set the background color of the plot to #c9c9c9 and the show() function to display the plot.\n\nThis code demonstrates how to use plotly and plotly.express to create an interactive scatter plot with colored markers and hover text. plotly provides a wide range of tools for creating interactive visualizations, making it a popular choice for data analysis and scientific computing.\n'''\nimport plotly.express as px\nimport plotly.io as pio\ngapminder = px.data.gapminder()\ngapminder2007 = gapminder.query(\"year == 2007\")\nfig = px.scatter(gapminder2007, \n                 x=\"gdpPercap\", y=\"lifeExp\", color=\"continent\", \n                 size=\"pop\", size_max=60,\n                 hover_name=\"country\")\nfig.update_layout(paper_bgcolor='#c9c9c9', plot_bgcolor='#c9c9c9')\nfig.show()\n```","srcMarkdownNoYaml":"\nWe strongly believe that the best way to acquire knowledge is through practical experience. That's why we prioritize experiential learning and recognize the importance of diverse perspectives and identities in education. Our approach to learning is collaborative, interactive, and rooted in shared cultural practices. We value personal autonomy, creativity, and self-fulfillment. It's worth noting that we do not use rewards or punishments to influence learning.\n\nLearning data science is a continuous journey, and embracing the learning process is essential. Feel free to experiment, make mistakes, and ask questions. With time and practice, youâ€™ll become more comfortable with Data Science and be able to tackle increasingly complex tasks. We suggest using Python for web development, applications, or data science; however, it is not the only option in the market. \n\n```{mermaid}\nflowchart TD\n    A[Data Science] --> B{Tool}\n    B -->|Model| C[Result]\n    C --> D[Conclusion]\n    D --> B\n    B ---->|No| E[End]\n```\n\\\n**Here are some steps you can take to learn data science:**\n\n* Learn the fundamentals of computer science, including data structures, algorithms, and programming languages. Python is a popular language for data science, but other languages like R and Julia are also used.\n\n* Learn the basics of statistics and probability theory, which are essential for understanding data analysis and machine learning.\n\n* Learn how to work with data using tools like SQL, Excel, and data visualization libraries like Matplotlib and Seaborn.\n\n* Learn machine learning algorithms and techniques, including supervised and unsupervised learning, regression, classification, and clustering.\n\n* Practice your skills by working on real-world projects and participating in online communities like Kaggle and GitHub.\n\n* Keep up with the latest developments in the field by reading blogs, attending conferences, and following experts on social media.\n\n\n# Start with Python, becuase it is a versatile programming language that has a wide range of applications and is used in many different fields.\n<mark>Notes:</mark> If you have programming experience, it would be beneficial to begin learning basic statistics as a beginner.\n\n:::{.empty-half-space}\n:::\n\nPython has a vast ecosystem of libraries that provide a wide range of functionality for various tasks. These libraries can be installed using package managers like [pip](https://packaging.python.org/en/latest/tutorials/installing-packages/) and [conda](https://docs.conda.io/projects/conda/en/latest/user-guide/install/macos.html). Some of the most popular libraries include \n\n* NumPy,\n* Pandas, \n* Matplotlib, \n* Scikit-learn,\n* TensorFlow, \nand PyTorch.\n\n**NumPy** is a library for numerical computing that provides support for arrays and matrices. Pandas is a library for data manipulation and analysis that provides support for data frames and series. Matplotlib is a library for data visualization that provides support for creating charts and graphs. Scikit-learn is a library for machine learning that provides support for various algorithms and models. TensorFlow and PyTorch are libraries for deep learning that provide support for building and training neural networks.\n\nThere are also libraries for web development, such as [Flask](https://flask.palletsprojects.com/) and [Django](https://www.djangoproject.com), and libraries for scientific computing, such as [SciPy](https://scipy.org) and [SymPy](https://www.sympy.org). Python also has libraries for working with databases, such as SQLAlchemy and Psycopg2, and libraries for working with APIs, such as Requests and PyGithub.\n\nOverall, the Python ecosystem of libraries is vast and diverse, providing support for a wide range of tasks and applications.\n\n## [NumPy](https://numpy.org)\nNumPy is a powerful Python library for numerical computing. It provides support for large, multi-dimensional arrays and matrices, along with a collection of mathematical functions to operate on these arrays efficiently. NumPy is widely used in scientific computing, data analysis, and machine learning.\n\n```{python}\n'''\nIn this code snippet, we are importing the NumPy library and giving it an alias np. NumPy is a library for numerical computing in Python that provides support for arrays and matrices.\n\nNext, we are creating a NumPy array a using the arange() function, which creates an array of integers from 0 to 14. We then use the reshape() function to reshape the array into a 3x5 matrix.\n'''\nimport numpy as np\na = np.arange(15).reshape(3, 5)\na\n```\n\n## [Matplotlib](https://matplotlib.org)\nMatplotlib is a popular Python library used for creating visualizations and plots. It provides a wide range of functionality for generating various types of charts, graphs, and plots. Here's a brief introduction to get you started with Matplotlib.\n\n```{python}\n'''\nIn this code snippet, we are importing the pyplot module from the matplotlib library and giving it an alias plt. matplotlib is a plotting library for Python that provides a wide range of tools for creating visualizations.\n\nNext, we are creating a new figure using the figure() function from pyplot. We then create three NumPy arrays x, y, and yerr using the arange() and linspace() functions. These arrays are used to generate a sine wave with some error bars.\n\nWe then set the face color of the figure to #c9c9c9 using the figure() function from pyplot.\n\nNext, we use the errorbar() function from pyplot to plot the sine wave with error bars. We create four different plots with different combinations of upper and lower limits on the error bars. We also add labels to each plot using the label parameter.\n\nFinally, we use the legend() function from pyplot to add a legend to the plot and the show() function to display the plot.\n\nThis code demonstrates how to use matplotlib to create a plot with error bars and a legend. matplotlib provides a wide range of tools for creating visualizations, making it a popular choice for data analysis and scientific computing.\n'''\nimport matplotlib.pyplot as plt\n\nfig = plt.figure()\nx = np.arange(10)\ny = 2.5 * np.sin(x / 20 * np.pi)\nyerr = np.linspace(0.05, 0.2, 10)\nplt.figure(facecolor='#c9c9c9')\n\nplt.errorbar(x, y + 3, yerr=yerr, label='both limits (default)')\nplt.errorbar(x, y + 2, yerr=yerr, uplims=True, label='uplims=True')\nplt.errorbar(x, y + 1, yerr=yerr, uplims=True, lolims=True,\n             label='uplims=True, lolims=True')\n\nupperlimits = [True, False] * 5\nlowerlimits = [False, True] * 5\nplt.errorbar(x, y, yerr=yerr, uplims=upperlimits, lolims=lowerlimits,\n             label='subsets of uplims and lolims')\n\nplt.legend(loc='lower right')\nplt.show(fig)\n```\n\n## [Plotly](https://plotly.com)\nPlotly is a powerful data visualization library that allows you to create interactive and dynamic visualizations in Python. It supports a wide range of chart types, including line plots, scatter plots, bar charts, histograms, and more. In addition to Python, Plotly also has APIs for R, MATLAB, JavaScript, and other programming languages.\n\n```{python}\n'''\nIn this code snippet, we are importing the plotly.express module and giving it an alias px. plotly is a Python library for creating interactive visualizations, and plotly.express is a high-level interface for creating many types of plots.\n\nNext, we are importing the plotly.io module and giving it an alias pio. This module provides tools for exporting plots to various file formats.\n\nWe then load the gapminder dataset from plotly.express using the data() function and store it in a variable gapminder. This dataset contains information about life expectancy, GDP per capita, and population for various countries over time.\n\nWe then filter the dataset to only include data from the year 2007 using the query() function and store the result in a variable gapminder2007.\n\nNext, we use the scatter() function from plotly.express to create a scatter plot of GDP per capita vs. life expectancy, with markers colored by continent and sized by population. We also set the maximum marker size to 60 and specify the country name as the hover text.\n\nFinally, we use the update_layout() function to set the background color of the plot to #c9c9c9 and the show() function to display the plot.\n\nThis code demonstrates how to use plotly and plotly.express to create an interactive scatter plot with colored markers and hover text. plotly provides a wide range of tools for creating interactive visualizations, making it a popular choice for data analysis and scientific computing.\n'''\nimport plotly.express as px\nimport plotly.io as pio\ngapminder = px.data.gapminder()\ngapminder2007 = gapminder.query(\"year == 2007\")\nfig = px.scatter(gapminder2007, \n                 x=\"gdpPercap\", y=\"lifeExp\", color=\"continent\", \n                 size=\"pop\", size_max=60,\n                 hover_name=\"country\")\nfig.update_layout(paper_bgcolor='#c9c9c9', plot_bgcolor='#c9c9c9')\nfig.show()\n```"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"center","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["css/styles.css"],"highlight-style":"github","toc":false,"output-file":"start-here.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.361","repo-url":"https://github.com/Possible-Institute/website","repo-actions":["edit","issue"],"theme":{"light":"css/light.scss","dark":"css/dark.scss"},"code-copy":true,"code-summary":"Show the code","caption":"none","toggle":true,"reader-mode":true,"title":"The quickest route to acquiring knowledge is through practice.","jupyter":"python3","layout-ncol":4},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}